#include "bits/stdc++.h"
using namespace std;

#ifdef Nero
#include "Deb.h"
#else
#define deb(...)
#endif

const int N = 2e5 + 5;

int a[N], sz[N]; 
vector<int> g[N]; 
long long val[N]; 
pair<int, long long> dp[N][2];

void dfs(int v) {
  sz[v] = 1; 
  dp[v][0].second = val[v] = a[v];
  for (int u : g[v]) {
    dfs(u); 
    sz[v] += sz[u]; 
    val[v] += val[u]; 
  }
  sort(g[v].begin(), g[v].end(), [&](int x, int y) {
    return val[x] * (dp[y][0].first + 2) > val[y] * (dp[x][0].first + 2); 
  });
  int la = (v != 1); 
  for (int u : g[v]) {
    dp[v][0].first += dp[u][0].first + 2;
    dp[v][0].second += dp[u][0].second + la * val[u]; 
    la += dp[u][0].first + 2; 
  }
  int m = g[v].size(); 
  int tot = la; 
  vector<long long> suf(m + 1);
  for (int i = m - 1; i >= 0; --i) {
    int u = g[v][i];
    suf[i] = suf[i + 1] + val[u]; 
  }
  la = (v != 1); 
  if (g[v].size()) {
    dp[v][1] = {N * 2, LLONG_MAX};      
  } else {
    dp[v][1] = {0, a[v]}; 
  }
  for (int i = 0; i < m; ++i) {
    int u = g[v][i]; 
    dp[v][1] = min(dp[v][1], make_pair(dp[v][0].first - dp[u][0].first - 2 + 1 + dp[u][1].first,
                                       dp[v][0].second - dp[u][0].second - la * val[u] - suf[i + 1] * (dp[u][0].first + 2)
                                       + dp[u][1].second + val[u] * (tot - dp[u][0].first - 2))); 
    la += dp[u][0].first + 2; 
  }
}

int main() {
  ios::sync_with_stdio(false);
  cin.tie(nullptr);
  int n, t;
  cin >> n >> t;
  for(int i = 2; i <= n; ++i) {
    int p;
    cin >> p >> a[i];
    g[p].push_back(i); 
  }
  dfs(1);
  cout << dp[1][t].first << ' ' << dp[1][t].second << '\n';     
  return 0;
}
