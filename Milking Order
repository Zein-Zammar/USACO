#include <bits/stdc++.h>

using namespace std;

void setIO(string s) {
	 if (!s.empty()){
			freopen((s + ".in").c_str(), "r", stdin);
			freopen((s + ".out").c_str(), "w", stdout);
	 }
}

const int N = 100001;
int n, m;
int out[N]; 
vector<int>g[N];
bool vis[N],st[N]; 
vector<vector<int>>e;

bool dfs(int nd){
	if (st[nd] == 1)
		return 0; 
	if (vis[nd])return 1;  
	vis[nd] = st[nd] = 1;
	bool ret = 1;
	for(auto&it:g[nd]){
		 ret &= dfs(it); 
	}
	st[nd] = 0;
	return ret;  
}

bool ch(int mid){
	memset(st,0,sizeof st);
	memset(vis,0,sizeof vis);
	bool ret = 1;
	for(int i=1;i<=mid;++i)
		for(int j=1;j<(int)e[i].size();++j)
			g[e[i][j-1]].push_back(e[i][j]);
	for(int i=1;i<=n;++i)
		if (!vis[i])
			ret &= dfs(i);
	for(int i=1;i<=n;++i)
		g[i].clear(); 
	return ret; 
}

signed main(){
	
	setIO("milkorder");

	ios::sync_with_stdio(false);
	cin.tie(nullptr);

	cin>>n>>m;
	e.resize(m+1);
	for(int i=1;i<=m;++i){
		int k;cin>>k;
		e[i].resize(k);
		for(int j=0;j<k;++j)
			cin>>e[i][j]; 
	}
	int l = 0, r = m;
	while(l < r){
		int mid = (l + r + 1) >> 1;
		if (ch(mid))l = mid;
		else r = mid-1;
	}
	priority_queue<int,vector<int>,greater<int>>pq; 
	vector<int>ans(n);
	for(int i=1;i<=l;++i)
		for(int j=1;j<(int)e[i].size();++j)
			g[e[i][j-1]].push_back(e[i][j]);
	for(int i=1;i<=l;++i)
		for(int j=1;j<(int)e[i].size();++j)
			++out[e[i][j]];
	for(int i=1;i<=n;++i)
		if (!out[i])pq.push(i);
	for(int i=0;i<n;++i){
		int src = pq.top();
		pq.pop();
		ans[i] = src; 
		for(auto&it:g[src]){
			--out[it]; 
			if (!out[it])
				pq.push(it); 
		}
	}
	for(int i=0;i<n;++i){
		cout<<ans[i];
		if (i != n-1)
			cout<<' ';
	}
}
