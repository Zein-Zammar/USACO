#pragma GCC optimize("Ofast,no-stack-protector,unroll-loops,fast-math,O3")
#include <bits/stdc++.h>

using namespace std;
int a[50000][5];

void setIO(string s) {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    if (!s.empty()){
        freopen((s + ".in").c_str(), "r", stdin);
        freopen((s + ".out").c_str(), "w", stdout);
    }
}

struct VectorHasher{
    int operator()(const vector<int> &V) const {
        int hash = V.size();
        for(auto &i : V) {
            hash ^= i + 0x9e3779b9 + (hash << 6) + (hash >> 2);
        }
        return hash;
    }
};
unordered_map<vector<int>,int,VectorHasher>mp;

signed main(){

    setIO("cowpatibility");

    long long n;cin>>n;
    for(int i=0;i<n;++i){
        for(int j=0;j<5;++j){
            cin>>a[i][j];
        }
        sort(a[i], a[i]+5);
        for(int s=1;s<32;++s){
            vector<int>sub;
            for(int j=0;j<5;++j){
                if ((s>>j)&1)
                    sub.push_back(a[i][j]);
            }
            ++mp[sub];
        }
    }
    long long ans = (n*(n-1))>>1;
    for(auto&it:mp){
        if (it.first.size()&1)
            ans -= ((long long)it.second*(it.second-1))>>1;
        else ans += ((long long)it.second*(it.second-1))>>1;
    }
    cout<<ans; 

}
