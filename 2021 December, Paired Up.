#include "bits/stdc++.h"
using namespace std;

#ifdef Nero
#include "Deb.h"
#else
#define debug(...)
#endif

const int N = 1e5 + 5;
const int INF = 1e9 + 9;

int nr[N];
int nxt[N];
int t, n, k;
int dp[N][2];
int x[N], y[N];

int solve(int l, int r) {
  if ((r - l + 1) % 2 == 0) {
    return 0; 
  }
  int ret = min(y[l], y[r]);
  for (int i = l + 1; i < r; ++i) {
    if (x[i + 1] - x[i - 1] <= k) {
      ret = min(ret, y[i]);
    } else if ((r - i) % 2 == 0 && (i - l) % 2 == 0) {
      ret = min(ret, y[i]); 
    }
  }
  return ret;
}

int bt(int i, bool f) {
  if (i == n) {
    return f == 0 ? 0 : -INF; 
  }
  int& ret = dp[i][f];
  if (ret != -1) {
    return ret;
  }
  if (f && x[i] - x[i - 1] > k) {
    return -INF;
  }
  ret = bt(i + 1, f ^ 1); 
  if (f && x[i + 1] - x[i - 1] <= k) {
    bool nf = (nxt[i] - i) % 2; 
    nf ^= 1; 
    ret = max(ret, bt(nxt[i] + 1, nf) + y[i]);
  }
  if (!f) {
    ret = max(ret, bt(nxt[i] + 1, (nxt[i] - i) % 2) + y[i]);
  }
  return ret; 
}

int main() {
  ios::sync_with_stdio(false);
  cin.tie(nullptr);
  cin >> t >> n >> k;
  for (int i = 0; i < n; ++i) {
    cin >> x[i] >> y[i];
  }
  int mn = 0; 
  for (int i = 0; i < n; ++i) {
    int j = i;
    while (j + 1 < n && x[j + 1] - x[j] <= k) {
      j++;
    }
    mn += solve(i, j); 
    i = j;
  }
  for (int i = 0; i < n; ++i) {
    int& tmp = nxt[i];
    if (i) tmp = nxt[i - 1];
    while (tmp + 1 < n && x[tmp + 1] - x[i] <= k) tmp++;
  }
  memset(dp, -1, sizeof dp);
  int mx = bt(0, 0);
  cout << (t == 1 ? mn : mx) << '\n';
  return 0;
}
