#include <bits/stdc++.h>

using namespace std;

void setIO(string s) {
	 if (!s.empty()){
			freopen((s + ".in").c_str(), "r", stdin);
			freopen((s + ".out").c_str(), "w", stdout);
	 }
}

const int N = 10004,L = 15;
int n, k;
int dp[N],l0g2[N],mat[L][N];

int get(int l, int r) {
	int lg = l0g2[r - l + 1];
	return max(mat[lg][l], mat[lg][r - (1 << lg) + 1]);
}

int bt(int id){
	if (id == n)return 0; 
	if (id > n)return -1e9; 
	int&ret = dp[id];
	if (~ret)return ret;
	ret = 0; 
	for(int i=1;i<=k;++i){
		int mx = get(id,id+i-1);
		ret = max(ret, bt(id+i)+mx*i);
	}
	return ret; 
}

signed main(){

	setIO("teamwork");

	ios::sync_with_stdio(false);
	cin.tie(nullptr);

	memset(dp,-1,sizeof dp);
	cin>>n>>k;
	vector<int>a(n+1);
	for(int i=0;i<n;++i){
		cin>>a[i];
		mat[0][i] = a[i];
	}
	for (int i = 2; i <= n; i++) {
		l0g2[i] = l0g2[i >> 1] + 1;
	}
	for (int j = 1; j < L; j++) {
		for (int i = 0; i <= n - (1 << j); i++) {
			mat[j][i] = max(mat[j - 1][i], mat[j - 1][i + (1 << (j - 1))]);
		}
	}
	cout<<bt(0);
}
