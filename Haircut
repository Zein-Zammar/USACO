#include <bits/stdc++.h>
#define lx (nd<<1)
#define rx ((nd<<1)|1)

using namespace std;

void setIO(string s) {
	 if (!s.empty()){
			freopen((s + ".in").c_str(), "r", stdin);
			freopen((s + ".out").c_str(), "w", stdout);
	 }
}

const int N = 100005;
int n;
int a[N],seg[N<<2];
vector<int>v[N];

void build(int nd,int l,int r){
	if (l == r)return void(seg[nd] = 1);
	int mid = (l + r) >> 1;
	build(lx,l,mid);
	build(rx,mid+1,r);
	seg[nd] = r-l+1;
}

void upd(int nd,int l,int r,int id){
	if (l == r)return void (seg[nd] = 0);
	int mid = (l + r) >> 1;
	if (id <= mid)upd(lx,l,mid,id);
	else upd(rx,mid+1,r,id);
	seg[nd] = seg[lx]+seg[rx];
}

int get(int nd,int l,int r,int s,int e){
	if (l > e || r < s)return 0;
	if (l >= s && r <= e)return seg[nd];
	int mid = (l + r) >> 1;
	return get(lx,l,mid,s,e)+get(rx,mid+1,r,s,e);
}

signed main(){

	setIO("haircut");

	ios::sync_with_stdio(false);
	cin.tie(nullptr);

	cin>>n;
	for(int i=1;i<=n;++i){
		cin>>a[i];
		v[a[i]].push_back(i);
	}
	build(1,1,n);
	long long ans = 0; 
	for(int i=0;i<n;++i){
		cout<<ans<<'\n';
		for(auto&it:v[i])
			upd(1,1,n,it);
		for(auto&it:v[i])
			ans += get(1,1,n,1,it);
	}
}
